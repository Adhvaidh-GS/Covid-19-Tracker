{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","active","isRed","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCoutriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e960d16e.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from '@material-ui/core'\r\nimport './InfoBox.css'\r\nimport React from 'react'\r\nfunction InfoBox({ title, cases, active, isRed, total, ...props }) {\r\n    return (\r\n        <Card onClick={props.onClick} className={`infoBox ${active && 'infoBox--selected'} ${isRed && \"infoBox--red\"}`}>\r\n            <CardContent>\r\n                <Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n                    {title}\r\n                </Typography>\r\n                <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\r\n                <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n                Total: {total} \r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import numeral from \"numeral\";\r\nimport React from \"react\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n        hex: \"#CC1034\",\r\n        multiplier: 200,\r\n    },\r\n    recovered: {\r\n        hex: \"#7dd71d\",\r\n        multiplier: 300,\r\n    },\r\n    deaths: {\r\n        hex: \"#fb4443\",\r\n        multiplier: 1000,\r\n    },\r\n};\r\n\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n\r\n    sortedData.sort((a, b) => {\r\n        if (a.cases > b.cases) {\r\n            return -1;\r\n        } else {\r\n            return 1;\r\n        }\r\n    })\r\n    return sortedData;\r\n}\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType='cases') => (\r\n    data.map((country) => (\r\n        <Circle\r\n            center={[country.countryInfo.lat, country.countryInfo.long]}\r\n            color= {casesTypeColors[casesType].hex}\r\n            fillColor={casesTypeColors[casesType].hex}\r\n            fillOpacity={0.4}\r\n            radius={\r\n                Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n            }\r\n        >\r\n        <Popup>\r\n            <div className=\"info-container\">\r\n                <div\r\n                className=\"info-flag\"\r\n                style={{ backgroundImage: `url(${country.countryInfo.flag})`}}\r\n                />\r\n                <div className=\"info-name\">{country.country}</div>\r\n                <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\r\n                <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\r\n                <div className=\"info-deaths\">Deaths: {numeral(country.deaths).format(0,0)}</div>\r\n            </div>\r\n        </Popup>\r\n        </Circle>\r\n    ))\r\n)\r\n\r\n// To sort data according to cases","import React from 'react'\r\nimport './Map.css'\r\nimport { MapContainer as LeafletMap, TileLayer } from 'react-leaflet'\r\nimport { showDataOnMap } from './util';\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer \r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                />\r\n                {showDataOnMap(countries, casesType)}\r\n            </LeafletMap>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Map\r\n","import numeral from 'numeral'\r\nimport React from 'react'\r\nimport './Table.css'\r\n\r\n\r\nfunction Table({ countries }) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({country, cases}) => (\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td>\r\n                        <strong>{numeral(cases).format(\"0,0\")}</strong>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\nimport './Table.css'\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className=\"line_graph\">\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;","import React, { useEffect, useState } from 'react';\nimport { FormControl, MenuItem, Select, Card, CardContent} from '@material-ui/core';\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport LineGraph from './LineGraph';\nimport './App.css';\nimport { prettyPrintStat, sortData } from './util';\nimport \"leaflet/dist/leaflet.css\";\n\nconst App = () => {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat:34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then((response) => response.json())\n    .then((data) => {\n      setCountryInfo(data)\n    });\n  }, []);\n\n  useEffect(() => {\n    const getCoutriesData = async () => {\n    await fetch(\"https://disease.sh/v3/covid-19/countries\")\n    .then((response) => response.json())\n    .then((data) => {\n      const countries = data.map((country) => ({\n          name: country.country,\n          value: country.countryInfo.iso2,\n        }));\n\n        const sortedData = sortData(data)\n        setTableData(sortedData);\n        setMapCountries(data);\n        setCountries(countries);\n      });\n    };\n\n    getCoutriesData();\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    setCountry(countryCode);\n\n    const url = \n    countryCode === 'worldwide'\n    ? 'https://disease.sh/v3/covid-19/all' \n    : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    \n    await fetch(url)\n    .then((response) => response.json())\n    .then((data) => {\n      setCountry(countryCode);\n      setCountryInfo(data);\n      setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n      setMapZoom(3);\n    });\n  };\n\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n          <div className=\"app__header\">\n            <h1>COVID-19 TRACKER</h1>\n            <FormControl className=\"app__dropdown\">\n              <Select \n              variant=\"outlined\"\n              onChange={onCountryChange}\n              value={country}\n              >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n              </Select>\n            </FormControl>\n          </div>\n            \n          <div className=\"app__stats\">\n              <InfoBox \n              isRed\n              active={casesType === \"cases\"}\n              onClick={(e) => setCasesType('cases')}\n              title=\"Coronavirus Cases\" \n              cases={prettyPrintStat(countryInfo.todayCases)} \n              total={prettyPrintStat(countryInfo.cases)}\n              />\n              <InfoBox \n              active={casesType === \"recovered\"}\n              onClick={(e) => setCasesType('recovered')}\n              title=\"Recovered\" \n              cases={prettyPrintStat(countryInfo.todayRecovered)} \n              total={prettyPrintStat(countryInfo.recovered)}\n              />\n              <InfoBox \n              isRed\n              active={casesType === \"deaths\"}\n              onClick={(e) => setCasesType('deaths')}\n              title=\"Deaths\" \n              cases={prettyPrintStat(countryInfo.todayDeaths)} \n              total={prettyPrintStat(countryInfo.deaths)}\n              />\n          </div>\n\n          <Map\n          casesType={casesType}\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n          />\n      </div>\n        <Card className=\"app__right\">\n          <CardContent>\n            <h3>Live Cases by Country</h3>\n            <Table countries={tableData}/>\n            <h3 className=\"graph__title\">Worldwide new {casesType}</h3>\n            <LineGraph casesType={casesType}/>\n          </CardContent>\n        </Card>\n      </div>\n  );\n}\n\nexport default App;\n\n// 1.07:35 \n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}